package ua.deti.pedros50.SauceLabsStack;
// Generated by Selenium IDE
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;

import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;

import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;

public class FlightPurchaseTest {
    private WebDriver driver;

    @BeforeEach
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", "/home/pedro/chromedriver_linux64/chromedriver");
        driver = new ChromeDriver();
    }

    @AfterEach
    public void cleanUp() {
        driver.close();
    }

    @Test
    public void testflightpurchase() {
        driver.get("https://blazedemo.com/");
        driver.manage().window().setSize(new Dimension(1389, 789));
        
        {
          WebElement element = driver.findElement(By.name("fromPort"));
          Actions builder = new Actions(driver);
          builder.moveToElement(element).clickAndHold().perform();
        }
        {
          WebElement element = driver.findElement(By.name("fromPort"));
          Actions builder = new Actions(driver);
          builder.moveToElement(element).perform();
        }
        {
          WebElement element = driver.findElement(By.name("fromPort"));
          Actions builder = new Actions(driver);
          builder.moveToElement(element).release().perform();
        }
        {
          WebElement dropdown = driver.findElement(By.name("toPort"));
          dropdown.findElement(By.xpath("//option[. = 'London']")).click();
        }
        {
          WebElement element = driver.findElement(By.name("toPort"));
          Actions builder = new Actions(driver);
          builder.moveToElement(element).clickAndHold().perform();
        }
        {
          WebElement element = driver.findElement(By.name("toPort"));
          Actions builder = new Actions(driver);
          builder.moveToElement(element).perform();
        }
        {
          WebElement element = driver.findElement(By.name("toPort"));
          Actions builder = new Actions(driver);
          builder.moveToElement(element).release().perform();
        }

        driver.findElement(By.cssSelector(".btn-primary")).click();

        assertThat(driver.findElement(By.cssSelector("h3")).getText(), is("Flights from Paris to London:"));

        driver.findElement(By.cssSelector("tr:nth-child(2) .btn")).click();
        driver.findElement(By.id("inputName")).click();
        driver.findElement(By.id("inputName")).sendKeys("Pedro Santos");
        driver.findElement(By.cssSelector(".control-group:nth-child(2) > .controls")).click();
        driver.findElement(By.id("creditCardNumber")).click();
        driver.findElement(By.id("creditCardNumber")).sendKeys("123123123123");
        driver.findElement(By.cssSelector(".btn-primary")).click();

        assertThat(driver.findElement(By.cssSelector("h1")).getText(), is("Thank you for your purchase today!"));
        //  Test will fail if the following line is uncommented:
        //assertThat(driver.getTitle(), is("BlazeDeo Confirmation"));
        assertThat(driver.getTitle(), is("BlazeDemo Confirmation"));
    }
}
